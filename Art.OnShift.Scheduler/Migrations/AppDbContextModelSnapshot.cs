// <auto-generated />
using System;
using Art.OnShift.Scheduler.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Art.OnShift.Scheduler.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Art.OnShift.Scheduler.Models.EventAcknowledgeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AckTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Acknowledged")
                        .HasColumnType("boolean");

                    b.Property<string>("AcknowledgedBy")
                        .HasColumnType("text");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("NotificationSentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EventAcknowledges");
                });

            modelBuilder.Entity("Art.OnShift.Scheduler.Models.EventAuditModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("Level1Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Level2Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Level3Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PreviousEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreviousLevel1Id")
                        .HasColumnType("text");

                    b.Property<string>("PreviousLevel2Id")
                        .HasColumnType("text");

                    b.Property<string>("PreviousLevel3Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PreviousStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreviousTitle")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EventsAudits");
                });

            modelBuilder.Entity("Art.OnShift.Scheduler.Models.EventModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Level1Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Level2Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Level3Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Level1Id");

                    b.HasIndex("Level2Id");

                    b.HasIndex("Level3Id");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("Art.OnShift.Scheduler.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Art.OnShift.Scheduler.Models.EventModel", b =>
                {
                    b.HasOne("Art.OnShift.Scheduler.Models.UserModel", "Level1")
                        .WithMany()
                        .HasForeignKey("Level1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Art.OnShift.Scheduler.Models.UserModel", "Level2")
                        .WithMany()
                        .HasForeignKey("Level2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Art.OnShift.Scheduler.Models.UserModel", "Level3")
                        .WithMany()
                        .HasForeignKey("Level3Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level1");

                    b.Navigation("Level2");

                    b.Navigation("Level3");
                });
#pragma warning restore 612, 618
        }
    }
}
